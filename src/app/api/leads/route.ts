import { NextRequest, NextResponse } from 'next/server';
import { PrismaClient } from '@prisma/client';
import TelegramBot from 'node-telegram-bot-api';

const prisma = new PrismaClient();

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram –±–æ—Ç–∞
const bot = process.env.TELEGRAM_BOT_TOKEN 
  ? new TelegramBot(process.env.TELEGRAM_BOT_TOKEN, { polling: false })
  : null;

export async function POST(request: NextRequest) {
  try {
    const body = await request.json();
    const { name, business, request: userRequest, budget, contacts } = body;

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
    if (!name || !business || !contacts) {
      return NextResponse.json(
        { error: '–û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è: –∏–º—è, –±–∏–∑–Ω–µ—Å, –∫–æ–Ω—Ç–∞–∫—Ç—ã' },
        { status: 400 }
      );
    }

    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    const lead = await prisma.lead.create({
      data: {
        name,
        business,
        request: userRequest || '',
        budget: budget || '',
        contacts,
      },
    });

    // –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram
    if (bot && process.env.TELEGRAM_CHAT_ID) {
      const message = `üéØ *–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ #${lead.id}*

üë§ *–ò–º—è:* ${name}
üè¢ *–ë–∏–∑–Ω–µ—Å:* ${business}
üí∞ *–ë—é–¥–∂–µ—Ç:* ${budget || '–ù–µ —É–∫–∞–∑–∞–Ω'}
üìù *–ó–∞–ø—Ä–æ—Å:* ${userRequest || '–ù–µ —É–∫–∞–∑–∞–Ω'}
üìû *–ö–æ–Ω—Ç–∞–∫—Ç—ã:* ${contacts}

üìÖ *–î–∞—Ç–∞:* ${new Date().toLocaleString('ru-RU')}`;

      try {
        await bot.sendMessage(process.env.TELEGRAM_CHAT_ID, message, {
          parse_mode: 'Markdown',
        });
      } catch (telegramError) {
        console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram:', telegramError);
        // –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å, –µ—Å–ª–∏ Telegram –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
      }
    }

    return NextResponse.json({
      success: true,
      message: '–ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!',
      leadId: lead.id,
    });

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞—è–≤–∫–∏:', error);
    return NextResponse.json(
      { error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' },
      { status: 500 }
    );
  }
}

export async function GET() {
  try {
    // –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –ª–∏–¥–æ–≤ (–¥–ª—è –∞–¥–º–∏–Ω–∫–∏ –≤ –±—É–¥—É—â–µ–º)
    const leads = await prisma.lead.findMany({
      orderBy: { createdAt: 'desc' },
      take: 50, // –ü–æ—Å–ª–µ–¥–Ω–∏–µ 50 –∑–∞—è–≤–æ–∫
    });

    return NextResponse.json({ leads });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ª–∏–¥–æ–≤:', error);
    return NextResponse.json(
      { error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' },
      { status: 500 }
    );
  }
}
