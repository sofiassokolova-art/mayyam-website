import { NextRequest, NextResponse } from 'next/server';

// –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ –∏–º–ø–æ—Ä—Ç—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Å—Ä–µ–¥
async function getModules() {
  try {
    const { sql } = await import('@vercel/postgres');
    const TelegramBot = (await import('node-telegram-bot-api')).default;
    return { sql, TelegramBot };
  } catch (error) {
    console.warn('Some modules not available:', error);
    return { sql: null, TelegramBot: null };
  }
}

export async function POST(request: NextRequest) {
  try {
    const { sql, TelegramBot } = await getModules();
    const body = await request.json();
    const { name, business, request: userRequest, budget, contacts } = body;

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
    if (!name || !business || !contacts) {
      return NextResponse.json(
        { error: '–û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è: –∏–º—è, –±–∏–∑–Ω–µ—Å, –∫–æ–Ω—Ç–∞–∫—Ç—ã' },
        { status: 400 }
      );
    }

    let leadId = Math.floor(Math.random() * 10000); // –í—Ä–µ–º–µ–Ω–Ω—ã–π ID

    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω sql)
    if (sql) {
      try {
        // –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        await sql`
          CREATE TABLE IF NOT EXISTS leads (
            id SERIAL PRIMARY KEY,
            name TEXT NOT NULL,
            business TEXT NOT NULL,
            request TEXT,
            budget TEXT,
            contacts TEXT NOT NULL,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
          );
        `;

        // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        const result = await sql`
          INSERT INTO leads (name, business, request, budget, contacts)
          VALUES (${name}, ${business}, ${userRequest || ''}, ${budget || ''}, ${contacts})
          RETURNING id;
        `;

        leadId = result.rows[0].id;
      } catch (dbError) {
        console.error('Database error:', dbError);
        // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–µ–∑ –ë–î, –Ω–æ —Å Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ–º
      }
    }

    // –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram
    if (TelegramBot && process.env.TELEGRAM_BOT_TOKEN && process.env.TELEGRAM_CHAT_ID) {
      try {
        const bot = new TelegramBot(process.env.TELEGRAM_BOT_TOKEN, { polling: false });
        const message = `üéØ *–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ #${leadId}*

üë§ *–ò–º—è:* ${name}
üè¢ *–ë–∏–∑–Ω–µ—Å:* ${business}
üí∞ *–ë—é–¥–∂–µ—Ç:* ${budget || '–ù–µ —É–∫–∞–∑–∞–Ω'}
üìù *–ó–∞–ø—Ä–æ—Å:* ${userRequest || '–ù–µ —É–∫–∞–∑–∞–Ω'}
üìû *–ö–æ–Ω—Ç–∞–∫—Ç—ã:* ${contacts}

üìÖ *–î–∞—Ç–∞:* ${new Date().toLocaleString('ru-RU')}

---
üåê *–ò—Å—Ç–æ—á–Ω–∏–∫:* –°–∞–π—Ç Mayyam`;

        await bot.sendMessage(process.env.TELEGRAM_CHAT_ID, message, {
          parse_mode: 'Markdown',
        });
      } catch (telegramError) {
        console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram:', telegramError);
        // –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å, –µ—Å–ª–∏ Telegram –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
      }
    }

    return NextResponse.json({
      success: true,
      message: '–ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!',
      leadId: leadId,
    });

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞—è–≤–∫–∏:', error);
    return NextResponse.json(
      { error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' },
      { status: 500 }
    );
  }
}

export async function GET() {
  try {
    const { sql } = await getModules();
    
    if (!sql) {
      return NextResponse.json({ 
        leads: [],
        message: 'Database not available in development mode'
      });
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –ª–∏–¥–æ–≤ (–¥–ª—è –∞–¥–º–∏–Ω–∫–∏ –≤ –±—É–¥—É—â–µ–º)
    const result = await sql`
      SELECT * FROM leads 
      ORDER BY created_at DESC 
      LIMIT 50;
    `;

    return NextResponse.json({ leads: result.rows });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ª–∏–¥–æ–≤:', error);
    return NextResponse.json(
      { error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' },
      { status: 500 }
    );
  }
}