/* eslint-disable @typescript-eslint/no-explicit-any */
import { NextRequest, NextResponse } from 'next/server';

// –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ –∏–º–ø–æ—Ä—Ç—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Å—Ä–µ–¥
async function getModules() {
  try {
    const { sql } = await import('@vercel/postgres');
    const TelegramBot = (await import('node-telegram-bot-api')).default;
    return { sql, TelegramBot };
  } catch (error) {
    console.warn('Some modules not available:', error);
    return { sql: null, TelegramBot: null };
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞—Ç—ã
function formatDate(dateString: string): string {
  const date = new Date(dateString);
  return date.toLocaleString('ru-RU', {
    day: '2-digit',
    month: '2-digit', 
    year: 'numeric',
    hour: '2-digit',
    minute: '2-digit'
  });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –ª–∏–¥–æ–≤ –≤ CSV —Ñ–æ—Ä–º–∞—Ç
function formatLeadsAsCSV(leads: any[]): string {
  const headers = '–ù–æ–º–µ—Ä –∑–∞—è–≤–∫–∏,ID,–ò–º—è,–ë–∏–∑–Ω–µ—Å,–ó–∞–ø—Ä–æ—Å,–ë—é–¥–∂–µ—Ç,–ö–æ–Ω—Ç–∞–∫—Ç—ã,–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è\n';
  const rows = leads.map(lead => 
    `${lead.lead_number || lead.id},${lead.id},"${lead.name}","${lead.business}","${lead.request || ''}","${lead.budget || ''}","${lead.contacts}","${formatDate(lead.created_at)}"`
  ).join('\n');
  
  return headers + rows;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ª–∏–¥–∞
function formatLead(lead: any, isLast = false): string {
  const leadNumber = lead.lead_number || lead.id;
  const prefix = isLast ? 'üÜï *–ü–æ—Å–ª–µ–¥–Ω–∏–π –ª–∏–¥*' : `üéØ *–õ–∏–¥ #${leadNumber}*`;
  
  return `${prefix}

üë§ *–ò–º—è:* ${lead.name}
üè¢ *–ë–∏–∑–Ω–µ—Å:* ${lead.business}
üí∞ *–ë—é–¥–∂–µ—Ç:* ${lead.budget || '–ù–µ —É–∫–∞–∑–∞–Ω'}
üìù *–ó–∞–ø—Ä–æ—Å:* ${lead.request || '–ù–µ —É–∫–∞–∑–∞–Ω'}
üìû *–ö–æ–Ω—Ç–∞–∫—Ç—ã:* ${lead.contacts}
üìÖ *–î–∞—Ç–∞:* ${formatDate(lead.created_at)}`;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü
async function ensureTables(sql: any) {
  try {
    await sql`
      CREATE TABLE IF NOT EXISTS leads (
        id SERIAL PRIMARY KEY,
        lead_number INTEGER UNIQUE NOT NULL,
        name TEXT NOT NULL,
        business TEXT NOT NULL,
        request TEXT,
        budget TEXT,
        contacts TEXT NOT NULL,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
      );
    `;

    await sql`
      CREATE TABLE IF NOT EXISTS bot_subscribers (
        id SERIAL PRIMARY KEY,
        chat_id BIGINT UNIQUE NOT NULL,
        username TEXT,
        first_name TEXT,
        last_name TEXT,
        is_active BOOLEAN DEFAULT true,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        last_activity TIMESTAMP DEFAULT CURRENT_TIMESTAMP
      );
    `;

    console.log('‚úÖ Tables ensured');
    return true;
  } catch (error) {
    console.error('‚ùå Table creation error:', error);
    return false;
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è/–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å—á–∏–∫–∞
async function upsertSubscriber(sql: any, message: any) {
  try {
    const { chat, from } = message;
    
    await sql`
      INSERT INTO bot_subscribers (chat_id, username, first_name, last_name, last_activity)
      VALUES (${chat.id}, ${from.username || null}, ${from.first_name || null}, ${from.last_name || null}, CURRENT_TIMESTAMP)
      ON CONFLICT (chat_id) 
      DO UPDATE SET 
        username = EXCLUDED.username,
        first_name = EXCLUDED.first_name,
        last_name = EXCLUDED.last_name,
        is_active = true,
        last_activity = CURRENT_TIMESTAMP;
    `;
    
    console.log(`‚úÖ Subscriber updated: ${chat.id}`);
    return true;
  } catch (error) {
    console.error('‚ùå Subscriber update error:', error);
    return false;
  }
}

export async function POST(request: NextRequest) {
  console.log('üîÑ Telegram Webhook received');
  
  try {
    const { sql, TelegramBot } = await getModules();
    
    if (!TelegramBot) {
      console.log('‚ùå TelegramBot module not available');
      return NextResponse.json({ error: 'TelegramBot not available' }, { status: 500 });
    }

    const body = await request.json();
    console.log('üì® Webhook body:', JSON.stringify(body, null, 2));
    
    const { message } = body;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –≤–∞–ª–∏–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if (!message || !message.chat) {
      console.log('‚ùå Invalid message format');
      return NextResponse.json({ ok: true });
    }

    const bot = new TelegramBot(process.env.TELEGRAM_BOT_TOKEN!, { polling: false });
    const chatId = message.chat.id;
    const text = message.text;

    console.log(`üìù Processing message from ${chatId}: ${text}`);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    const dbAvailable = sql && process.env.POSTGRES_URL;
    console.log(`üóÑÔ∏è Database available: ${dbAvailable}`);

    if (dbAvailable) {
      // –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ–¥–ø–∏—Å—á–∏–∫–∞
      const tablesOk = await ensureTables(sql);
      if (tablesOk) {
        await upsertSubscriber(sql, message);
      }
    }

    try {
      if (text === '/start') {
        const welcomeMessage = `üéâ *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!*

–í—ã –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –ª–∏–¥–∞—Ö —Å —Å–∞–π—Ç–∞ Mayyam.

ü§ñ *–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*

üìä /export_leads - –≠–∫—Å–ø–æ—Ä—Ç –≤—Å–µ—Ö –ª–∏–¥–æ–≤ –≤ CSV —Ñ–∞–π–ª
üÜï /last_lead - –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–π –ª–∏–¥
üìã /stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ª–∏–¥–∞–º
üìã /help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É

---
${dbAvailable ? '‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∞!' : '‚ö†Ô∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç—Å—è...'}`;

        await bot.sendMessage(chatId, welcomeMessage, { parse_mode: 'Markdown' });
        console.log('‚úÖ Welcome message sent');

      } else if (text === '/help') {
        const helpMessage = `ü§ñ *–ë–æ—Ç —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ª–∏–¥–∞–º–∏*

–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:

üìä /export_leads - –≠–∫—Å–ø–æ—Ä—Ç –≤—Å–µ—Ö –ª–∏–¥–æ–≤ –≤ CSV —Ñ–∞–π–ª
üÜï /last_lead - –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–π –ª–∏–¥
üìà /stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ª–∏–¥–∞–º
üìã /help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É

---
üåê –õ–∏–¥—ã –ø–æ—Å—Ç—É–ø–∞—é—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å —Å–∞–π—Ç–∞ Mayyam
${dbAvailable ? '‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∞–∫—Ç–∏–≤–Ω–∞!' : '‚ö†Ô∏è –°–æ–∑–¥–∞–π—Ç–µ Postgres –±–∞–∑—É –≤ Vercel Storage'}`;

        await bot.sendMessage(chatId, helpMessage, { parse_mode: 'Markdown' });
        console.log('üìã Help sent');

      } else if (text === '/stats') {
        if (!dbAvailable) {
          await bot.sendMessage(chatId, '‚ö†Ô∏è *–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞*\n\n–°–æ–∑–¥–∞–π—Ç–µ Postgres –±–∞–∑—É –≤ Vercel Storage –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.', {
            parse_mode: 'Markdown'
          });
          return NextResponse.json({ ok: true });
        }

        // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ª–∏–¥–∞–º
        const leadsResult = await sql`SELECT COUNT(*) as total FROM leads;`;
        const subscribersResult = await sql`SELECT COUNT(*) as total FROM bot_subscribers WHERE is_active = true;`;
        
        const today = new Date().toISOString().split('T')[0];
        const todayResult = await sql`
          SELECT COUNT(*) as total FROM leads 
          WHERE DATE(created_at) = ${today};
        `;

        const statsMessage = `üìà *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞*

üìä –í—Å–µ–≥–æ –ª–∏–¥–æ–≤: ${leadsResult.rows[0].total}
üìÖ –õ–∏–¥–æ–≤ —Å–µ–≥–æ–¥–Ω—è: ${todayResult.rows[0].total}
üë• –ü–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –±–æ—Ç–∞: ${subscribersResult.rows[0].total}
üïí –û–±–Ω–æ–≤–ª–µ–Ω–æ: ${new Date().toLocaleString('ru-RU')}`;

        await bot.sendMessage(chatId, statsMessage, { parse_mode: 'Markdown' });
        console.log('üìà Stats sent');

      } else if (text === '/last_lead') {
        if (!dbAvailable) {
          await bot.sendMessage(chatId, '‚ö†Ô∏è *–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞*\n\n–°–æ–∑–¥–∞–π—Ç–µ Postgres –±–∞–∑—É –≤ Vercel Storage –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ª–∏–¥–æ–≤.', {
            parse_mode: 'Markdown'
          });
          return NextResponse.json({ ok: true });
        }

        // –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –ª–∏–¥
        const result = await sql`
          SELECT id, lead_number, name, business, request, budget, contacts, created_at, updated_at 
          FROM leads 
          ORDER BY lead_number DESC 
          LIMIT 1;
        `;

        if (result.rows.length === 0) {
          await bot.sendMessage(chatId, 'üìù *–ü–æ—Å–ª–µ–¥–Ω–∏–π –ª–∏–¥*\n\n–õ–∏–¥–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç.', {
            parse_mode: 'Markdown'
          });
        } else {
          const lastLead = result.rows[0];
          const message = formatLead(lastLead, true);
          await bot.sendMessage(chatId, message, { parse_mode: 'Markdown' });
        }
        console.log('üÜï Last lead processed');

      } else if (text === '/export_leads') {
        if (!dbAvailable) {
          await bot.sendMessage(chatId, '‚ö†Ô∏è *–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞*\n\n–°–æ–∑–¥–∞–π—Ç–µ Postgres –±–∞–∑—É –≤ Vercel Storage –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –ª–∏–¥–æ–≤.', {
            parse_mode: 'Markdown'
          });
          return NextResponse.json({ ok: true });
        }

        // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ª–∏–¥–æ–≤
        const result = await sql`
          SELECT id, lead_number, name, business, request, budget, contacts, created_at, updated_at 
          FROM leads 
          ORDER BY lead_number DESC;
        `;

        if (result.rows.length === 0) {
          await bot.sendMessage(chatId, 'üìù *–≠–∫—Å–ø–æ—Ä—Ç –ª–∏–¥–æ–≤*\n\n–õ–∏–¥–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç.', {
            parse_mode: 'Markdown'
          });
          return NextResponse.json({ ok: true });
        }

        // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤ CSV
        const csvData = formatLeadsAsCSV(result.rows);
        const fileName = `leads_export_${new Date().toISOString().split('T')[0]}.csv`;

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
        await bot.sendDocument(chatId, Buffer.from(csvData, 'utf-8'), {
          caption: `üìä *–≠–∫—Å–ø–æ—Ä—Ç –ª–∏–¥–æ–≤*\n\n–í—Å–µ–≥–æ –ª–∏–¥–æ–≤: ${result.rows.length}\n–î–∞—Ç–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞: ${new Date().toLocaleString('ru-RU')}`,
          parse_mode: 'Markdown'
        }, {
          filename: fileName,
          contentType: 'text/csv'
        });

        console.log(`üìä Exported ${result.rows.length} leads`);
      }

    } catch (commandError) {
      console.error('‚ùå Command error:', commandError);
      await bot.sendMessage(chatId, `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã: ${commandError.message}`);
    }

    console.log('‚úÖ Webhook processed successfully');
    return NextResponse.json({ ok: true });

  } catch (error) {
    console.error('‚ùå Webhook error:', error);
    return NextResponse.json({ error: 'Internal error' }, { status: 500 });
  }
}

// GET –º–µ—Ç–æ–¥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞
export async function GET() {
  const hasPostgresUrl = !!process.env.POSTGRES_URL;
  const hasPrismaUrl = !!process.env.POSTGRES_PRISMA_URL;
  const hasTelegramToken = !!process.env.TELEGRAM_BOT_TOKEN;
  const hasChatId = !!process.env.TELEGRAM_CHAT_ID;
  
  return NextResponse.json({ 
    status: 'Telegram webhook endpoint active',
    environment: {
      postgres_url: hasPostgresUrl,
      postgres_prisma_url: hasPrismaUrl,
      telegram_token: hasTelegramToken,
      telegram_chat_id: hasChatId
    },
    database_status: hasPostgresUrl ? 'connected' : 'not configured',
    timestamp: new Date().toISOString(),
    version: '3.1'
  });
}