/* eslint-disable @typescript-eslint/no-explicit-any */
import { NextRequest, NextResponse } from 'next/server';

// –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ –∏–º–ø–æ—Ä—Ç—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Å—Ä–µ–¥
async function getModules() {
  try {
    const TelegramBot = (await import('node-telegram-bot-api')).default;
    return { TelegramBot };
  } catch (error) {
    console.warn('TelegramBot module not available:', error);
    return { TelegramBot: null };
  }
}

export async function POST(request: NextRequest) {
  console.log('üîÑ Telegram Webhook received');
  
  try {
    const { TelegramBot } = await getModules();
    
    if (!TelegramBot) {
      console.log('‚ùå TelegramBot module not available');
      return NextResponse.json({ error: 'TelegramBot not available' }, { status: 500 });
    }

    const body = await request.json();
    console.log('üì® Webhook body:', JSON.stringify(body, null, 2));
    
    const { message } = body;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –≤–∞–ª–∏–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if (!message || !message.chat) {
      console.log('‚ùå Invalid message format');
      return NextResponse.json({ ok: true });
    }

    const bot = new TelegramBot(process.env.TELEGRAM_BOT_TOKEN!, { polling: false });
    const chatId = message.chat.id;
    const text = message.text;

    console.log(`üìù Processing message from ${chatId}: ${text}`);

    try {
      if (text === '/start') {
        const welcomeMessage = `üéâ *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!*

–ë–æ—Ç —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ª–∏–¥–∞–º–∏ –∞–∫—Ç–∏–≤–µ–Ω!

ü§ñ *–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*

üìã /help - –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º
üìà /status - –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã
üîß /test - –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ

---
‚ú® –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ!`;

        await bot.sendMessage(chatId, welcomeMessage, { parse_mode: 'Markdown' });
        console.log('‚úÖ Welcome message sent');

      } else if (text === '/help') {
        const helpMessage = `ü§ñ *–ë–æ—Ç —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ª–∏–¥–∞–º–∏*

–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:

üìã /help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É
üìà /status - –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã
üîß /test - –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ

---
üåê –õ–∏–¥—ã –ø–æ—Å—Ç—É–ø–∞—é—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å —Å–∞–π—Ç–∞ Mayyam
‚ö†Ô∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç—Å—è...`;

        await bot.sendMessage(chatId, helpMessage, { parse_mode: 'Markdown' });
        console.log('üìã Help sent');

      } else if (text === '/status') {
        const statusMessage = `üìà *–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã*

‚úÖ Webhook: –ê–∫—Ç–∏–≤–µ–Ω
‚úÖ Telegram API: –†–∞–±–æ—Ç–∞–µ—Ç
‚ö†Ô∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç—Å—è
üïí –í—Ä–µ–º—è: ${new Date().toLocaleString('ru-RU')}

---
üîß –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –ø—Ä–∏–µ–º—É –ª–∏–¥–æ–≤!`;

        await bot.sendMessage(chatId, statusMessage, { parse_mode: 'Markdown' });
        console.log('üìà Status sent');

      } else if (text === '/test') {
        const testMessage = `üîß *–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ*

–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!

üìä –î–∞–Ω–Ω—ã–µ:
- Chat ID: ${chatId}
- –í—Ä–µ–º—è: ${new Date().toLocaleString('ru-RU')}
- –¢–æ–∫–µ–Ω: ‚úÖ –ù–∞—Å—Ç—Ä–æ–µ–Ω
- Webhook: ‚úÖ –ê–∫—Ç–∏–≤–µ–Ω

---
‚úÖ –í—Å–µ —Å–∏—Å—Ç–µ–º—ã —Ä–∞–±–æ—Ç–∞—é—Ç!`;

        await bot.sendMessage(chatId, testMessage, { parse_mode: 'Markdown' });
        console.log('üîß Test message sent');
      }

    } catch (commandError) {
      console.error('‚ùå Command error:', commandError);
      await bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã');
    }

    console.log('‚úÖ Webhook processed successfully');
    return NextResponse.json({ ok: true });

  } catch (error) {
    console.error('‚ùå Webhook error:', error);
    return NextResponse.json({ error: 'Internal error' }, { status: 500 });
  }
}

// GET –º–µ—Ç–æ–¥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞
export async function GET() {
  return NextResponse.json({ 
    status: 'Telegram webhook endpoint active',
    timestamp: new Date().toISOString(),
    version: '2.0'
  });
}