import { NextRequest, NextResponse } from 'next/server';

// –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ –∏–º–ø–æ—Ä—Ç—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Å—Ä–µ–¥
async function getModules() {
  try {
    const { sql } = await import('@vercel/postgres');
    const TelegramBot = (await import('node-telegram-bot-api')).default;
    return { sql, TelegramBot };
  } catch (error) {
    console.warn('Some modules not available:', error);
    return { sql: null, TelegramBot: null };
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞—Ç—ã
function formatDate(dateString: string): string {
  const date = new Date(dateString);
  return date.toLocaleString('ru-RU', {
    day: '2-digit',
    month: '2-digit', 
    year: 'numeric',
    hour: '2-digit',
    minute: '2-digit'
  });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –ª–∏–¥–æ–≤ –≤ CSV —Ñ–æ—Ä–º–∞—Ç
function formatLeadsAsCSV(leads: any[]): string {
  const headers = 'ID,–ò–º—è,–ë–∏–∑–Ω–µ—Å,–ó–∞–ø—Ä–æ—Å,–ë—é–¥–∂–µ—Ç,–ö–æ–Ω—Ç–∞–∫—Ç—ã,–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è\n';
  const rows = leads.map(lead => 
    `${lead.id},"${lead.name}","${lead.business}","${lead.request || ''}","${lead.budget || ''}","${lead.contacts}","${formatDate(lead.created_at)}"`
  ).join('\n');
  
  return headers + rows;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ª–∏–¥–∞
function formatLead(lead: any, isLast = false): string {
  const prefix = isLast ? 'üÜï *–ü–æ—Å–ª–µ–¥–Ω–∏–π –ª–∏–¥*' : `üéØ *–õ–∏–¥ #${lead.id}*`;
  
  return `${prefix}

üë§ *–ò–º—è:* ${lead.name}
üè¢ *–ë–∏–∑–Ω–µ—Å:* ${lead.business}
üí∞ *–ë—é–¥–∂–µ—Ç:* ${lead.budget || '–ù–µ —É–∫–∞–∑–∞–Ω'}
üìù *–ó–∞–ø—Ä–æ—Å:* ${lead.request || '–ù–µ —É–∫–∞–∑–∞–Ω'}
üìû *–ö–æ–Ω—Ç–∞–∫—Ç—ã:* ${lead.contacts}
üìÖ *–î–∞—Ç–∞:* ${formatDate(lead.created_at)}`;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü
async function ensureTables(sql: any) {
  await sql`
    CREATE TABLE IF NOT EXISTS leads (
      id SERIAL PRIMARY KEY,
      name TEXT NOT NULL,
      business TEXT NOT NULL,
      request TEXT,
      budget TEXT,
      contacts TEXT NOT NULL,
      created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
      updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
    );
  `;

  await sql`
    CREATE TABLE IF NOT EXISTS bot_subscribers (
      id SERIAL PRIMARY KEY,
      chat_id BIGINT UNIQUE NOT NULL,
      username TEXT,
      first_name TEXT,
      last_name TEXT,
      is_active BOOLEAN DEFAULT true,
      created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
      last_activity TIMESTAMP DEFAULT CURRENT_TIMESTAMP
    );
  `;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è/–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å—á–∏–∫–∞
async function upsertSubscriber(sql: any, message: any) {
  const { chat, from } = message;
  
  await sql`
    INSERT INTO bot_subscribers (chat_id, username, first_name, last_name, last_activity)
    VALUES (${chat.id}, ${from.username || null}, ${from.first_name || null}, ${from.last_name || null}, CURRENT_TIMESTAMP)
    ON CONFLICT (chat_id) 
    DO UPDATE SET 
      username = EXCLUDED.username,
      first_name = EXCLUDED.first_name,
      last_name = EXCLUDED.last_name,
      is_active = true,
      last_activity = CURRENT_TIMESTAMP;
  `;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
async function getActiveSubscribers(sql: any) {
  const result = await sql`
    SELECT chat_id FROM bot_subscribers 
    WHERE is_active = true;
  `;
  return result.rows.map((row: any) => row.chat_id);
}

export async function POST(request: NextRequest) {
  try {
    const { sql, TelegramBot } = await getModules();
    
    if (!sql || !TelegramBot) {
      return NextResponse.json({ error: 'Modules not available' }, { status: 500 });
    }

    const body = await request.json();
    const { message } = body;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –≤–∞–ª–∏–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if (!message || !message.chat) {
      return NextResponse.json({ ok: true });
    }

    const bot = new TelegramBot(process.env.TELEGRAM_BOT_TOKEN!, { polling: false });
    const chatId = message.chat.id;
    const text = message.text;

    try {
      // –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
      await ensureTables(sql);
      
      // –î–æ–±–∞–≤–ª—è–µ–º/–æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ–¥–ø–∏—Å—á–∏–∫–∞ –ø—Ä–∏ –ª—é–±–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
      await upsertSubscriber(sql, message);

      if (text === '/start') {
        const welcomeMessage = `üéâ *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!*

–í—ã –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –ª–∏–¥–∞—Ö —Å —Å–∞–π—Ç–∞ Mayyam.

ü§ñ *–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*

üìä /export_leads - –≠–∫—Å–ø–æ—Ä—Ç –≤—Å–µ—Ö –ª–∏–¥–æ–≤ –≤ CSV —Ñ–∞–π–ª
üÜï /last_lead - –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–π –ª–∏–¥
üìã /stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ª–∏–¥–∞–º
üîî /unsubscribe - –û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
üìã /help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É

---
‚ú® –¢–µ–ø–µ—Ä—å –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∫–∞–∂–¥–æ–º –Ω–æ–≤–æ–º –ª–∏–¥–µ!`;

        await bot.sendMessage(chatId, welcomeMessage, { parse_mode: 'Markdown' });

      } else if (text === '/export_leads') {
        // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ª–∏–¥–æ–≤
        const result = await sql`
          SELECT * FROM leads 
          ORDER BY created_at DESC;
        `;

        if (result.rows.length === 0) {
          await bot.sendMessage(chatId, 'üìù *–≠–∫—Å–ø–æ—Ä—Ç –ª–∏–¥–æ–≤*\n\n–õ–∏–¥–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç.', {
            parse_mode: 'Markdown'
          });
          return NextResponse.json({ ok: true });
        }

        // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤ CSV
        const csvData = formatLeadsAsCSV(result.rows);
        const fileName = `leads_export_${new Date().toISOString().split('T')[0]}.csv`;

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
        await bot.sendDocument(chatId, Buffer.from(csvData, 'utf-8'), {
          filename: fileName,
          contentType: 'text/csv'
        }, {
          caption: `üìä *–≠–∫—Å–ø–æ—Ä—Ç –ª–∏–¥–æ–≤*\n\n–í—Å–µ–≥–æ –ª–∏–¥–æ–≤: ${result.rows.length}\n–î–∞—Ç–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞: ${new Date().toLocaleString('ru-RU')}`,
          parse_mode: 'Markdown'
        });

      } else if (text === '/last_lead') {
        // –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –ª–∏–¥
        const result = await sql`
          SELECT * FROM leads 
          ORDER BY created_at DESC 
          LIMIT 1;
        `;

        if (result.rows.length === 0) {
          await bot.sendMessage(chatId, 'üìù *–ü–æ—Å–ª–µ–¥–Ω–∏–π –ª–∏–¥*\n\n–õ–∏–¥–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç.', {
            parse_mode: 'Markdown'
          });
        } else {
          const lastLead = result.rows[0];
          const message = formatLead(lastLead, true);
          await bot.sendMessage(chatId, message, { parse_mode: 'Markdown' });
        }

      } else if (text === '/stats') {
        // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ª–∏–¥–∞–º
        const leadsResult = await sql`SELECT COUNT(*) as total FROM leads;`;
        const subscribersResult = await sql`SELECT COUNT(*) as total FROM bot_subscribers WHERE is_active = true;`;
        
        const today = new Date().toISOString().split('T')[0];
        const todayResult = await sql`
          SELECT COUNT(*) as total FROM leads 
          WHERE DATE(created_at) = ${today};
        `;

        const statsMessage = `üìà *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞*

üìä –í—Å–µ–≥–æ –ª–∏–¥–æ–≤: ${leadsResult.rows[0].total}
üìÖ –õ–∏–¥–æ–≤ —Å–µ–≥–æ–¥–Ω—è: ${todayResult.rows[0].total}
üë• –ü–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –±–æ—Ç–∞: ${subscribersResult.rows[0].total}
üïí –û–±–Ω–æ–≤–ª–µ–Ω–æ: ${new Date().toLocaleString('ru-RU')}`;

        await bot.sendMessage(chatId, statsMessage, { parse_mode: 'Markdown' });

      } else if (text === '/unsubscribe') {
        await sql`
          UPDATE bot_subscribers 
          SET is_active = false 
          WHERE chat_id = ${chatId};
        `;

        await bot.sendMessage(chatId, 'üòî *–í—ã –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π*\n\n–ß—Ç–æ–±—ã —Å–Ω–æ–≤–∞ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /start', {
          parse_mode: 'Markdown'
        });

      } else if (text === '/help') {
        const helpMessage = `ü§ñ *–ë–æ—Ç —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ª–∏–¥–∞–º–∏*

–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:

üìä /export_leads - –≠–∫—Å–ø–æ—Ä—Ç –≤—Å–µ—Ö –ª–∏–¥–æ–≤ –≤ CSV —Ñ–∞–π–ª
üÜï /last_lead - –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–π –ª–∏–¥
üìà /stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ª–∏–¥–∞–º
üîî /unsubscribe - –û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
üìã /help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É

---
üåê –õ–∏–¥—ã –ø–æ—Å—Ç—É–ø–∞—é—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å —Å–∞–π—Ç–∞ Mayyam
‚ú® –í—Å–µ –ø–æ–¥–ø–∏—Å—á–∏–∫–∏ –ø–æ–ª—É—á–∞—é—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –ª–∏–¥–∞—Ö`;

        await bot.sendMessage(chatId, helpMessage, { parse_mode: 'Markdown' });
      }

    } catch (dbError) {
      console.error('Database error:', dbError);
      await bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö', {
        parse_mode: 'Markdown'
      });
    }

    return NextResponse.json({ ok: true });

  } catch (error) {
    console.error('Bot error:', error);
    return NextResponse.json({ error: 'Internal error' }, { status: 500 });
  }
}

// GET –º–µ—Ç–æ–¥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞
export async function GET() {
  return NextResponse.json({ 
    status: 'Bot webhook endpoint active',
    features: [
      'Multi-user support',
      'Automatic notifications',
      'CSV export',
      'Statistics'
    ],
    commands: ['/start', '/export_leads', '/last_lead', '/stats', '/unsubscribe', '/help']
  });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤—Å–µ–º –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∏–∑ leads API)
export async function notifyAllSubscribers(leadData: any) {
  try {
    const { sql, TelegramBot } = await getModules();
    
    if (!sql || !TelegramBot) {
      console.warn('Cannot send notifications: modules not available');
      return;
    }

    const bot = new TelegramBot(process.env.TELEGRAM_BOT_TOKEN!, { polling: false });
    
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
    const subscribers = await getActiveSubscribers(sql);
    
    if (subscribers.length === 0) {
      console.log('No active subscribers to notify');
      return;
    }

    const message = `üéØ *–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ #${leadData.leadId}*

üë§ *–ò–º—è:* ${leadData.name}
üè¢ *–ë–∏–∑–Ω–µ—Å:* ${leadData.business}
üí∞ *–ë—é–¥–∂–µ—Ç:* ${leadData.budget || '–ù–µ —É–∫–∞–∑–∞–Ω'}
üìù *–ó–∞–ø—Ä–æ—Å:* ${leadData.request || '–ù–µ —É–∫–∞–∑–∞–Ω'}
üìû *–ö–æ–Ω—Ç–∞–∫—Ç—ã:* ${leadData.contacts}

üìÖ *–î–∞—Ç–∞:* ${new Date().toLocaleString('ru-RU')}

---
üåê *–ò—Å—Ç–æ—á–Ω–∏–∫:* –°–∞–π—Ç Mayyam`;

    // –†–∞—Å—Å—ã–ª–∞–µ–º –≤—Å–µ–º –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º
    const notifications = subscribers.map(async (chatId: string) => {
      try {
        await bot.sendMessage(chatId, message, { parse_mode: 'Markdown' });
        console.log(`Notification sent to ${chatId}`);
      } catch (error) {
        console.error(`Failed to send notification to ${chatId}:`, error);
        
        // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞, –¥–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –µ–≥–æ
        if (error.response?.body?.error_code === 403) {
          await sql`
            UPDATE bot_subscribers 
            SET is_active = false 
            WHERE chat_id = ${chatId};
          `;
        }
      }
    });

    await Promise.all(notifications);
    console.log(`Notifications sent to ${subscribers.length} subscribers`);

  } catch (error) {
    console.error('Error in notifyAllSubscribers:', error);
  }
}