/* eslint-disable @typescript-eslint/no-explicit-any */
import { LeadNotification } from '@/types/bot';

// –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ –∏–º–ø–æ—Ä—Ç—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Å—Ä–µ–¥
async function getModules() {
  try {
    const { sql } = await import('@vercel/postgres');
    const TelegramBot = (await import('node-telegram-bot-api')).default;
    return { sql, TelegramBot };
  } catch (error) {
    console.warn('Some modules not available:', error);
    return { sql: null, TelegramBot: null };
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
async function getActiveSubscribers(sql: typeof import('@vercel/postgres').sql) {
  const result = await sql`
    SELECT chat_id FROM bot_subscribers 
    WHERE is_active = true;
  `;
  return result.rows.map((row: any) => row.chat_id);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤—Å–µ–º –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º
export async function notifyAllSubscribers(leadData: LeadNotification) {
  try {
    const { sql, TelegramBot } = await getModules();
    
    if (!sql || !TelegramBot) {
      console.warn('Cannot send notifications: modules not available');
      return;
    }

    const bot = new TelegramBot(process.env.TELEGRAM_BOT_TOKEN!, { polling: false });
    
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
    const subscribers = await getActiveSubscribers(sql);
    
    if (subscribers.length === 0) {
      console.log('No active subscribers to notify');
      return;
    }

    const message = `üéØ *–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ #${leadData.leadId}*

üë§ *–ò–º—è:* ${leadData.name}
üè¢ *–ë–∏–∑–Ω–µ—Å:* ${leadData.business}
üí∞ *–ë—é–¥–∂–µ—Ç:* ${leadData.budget || '–ù–µ —É–∫–∞–∑–∞–Ω'}
üìù *–ó–∞–ø—Ä–æ—Å:* ${leadData.request || '–ù–µ —É–∫–∞–∑–∞–Ω'}
üìû *–ö–æ–Ω—Ç–∞–∫—Ç—ã:* ${leadData.contacts}

üìÖ *–î–∞—Ç–∞:* ${new Date().toLocaleString('ru-RU')}

---
üåê *–ò—Å—Ç–æ—á–Ω–∏–∫:* –°–∞–π—Ç Mayyam`;

    // –†–∞—Å—Å—ã–ª–∞–µ–º –≤—Å–µ–º –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º
    const notifications = subscribers.map(async (chatId: number) => {
      try {
        await bot.sendMessage(chatId, message, { parse_mode: 'Markdown' });
        console.log(`Notification sent to ${chatId}`);
      } catch (error) {
        console.error(`Failed to send notification to ${chatId}:`, error);
        
        // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞, –¥–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –µ–≥–æ
        if ((error as Error & { response?: { body?: { error_code?: number } } }).response?.body?.error_code === 403) {
          await sql`
            UPDATE bot_subscribers 
            SET is_active = false 
            WHERE chat_id = ${chatId};
          `;
        }
      }
    });

    await Promise.all(notifications);
    console.log(`Notifications sent to ${subscribers.length} subscribers`);

  } catch (error) {
    console.error('Error in notifyAllSubscribers:', error);
  }
}
