/* eslint-disable @typescript-eslint/no-explicit-any */
import type { NextApiRequest, NextApiResponse } from 'next';

// –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ –∏–º–ø–æ—Ä—Ç—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Å—Ä–µ–¥
async function getModules() {
  try {
    const { sql } = await import('@vercel/postgres');
    const TelegramBot = (await import('node-telegram-bot-api')).default;
    return { sql, TelegramBot };
  } catch (error) {
    console.warn('Some modules not available:', error);
    return { sql: null, TelegramBot: null };
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞—Ç—ã
function formatDate(dateString: string): string {
  const date = new Date(dateString);
  return date.toLocaleString('ru-RU', {
    day: '2-digit',
    month: '2-digit', 
    year: 'numeric',
    hour: '2-digit',
    minute: '2-digit'
  });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ª–∏–¥–∞
function formatLead(lead: any, isLast = false): string {
  const leadNumber = lead.lead_number || lead.id;
  const prefix = isLast ? 'üÜï *–ü–æ—Å–ª–µ–¥–Ω–∏–π –ª–∏–¥*' : `üéØ *–õ–∏–¥ #${leadNumber}*`;
  
  return `${prefix}

üë§ *–ò–º—è:* ${lead.name}
üè¢ *–ë–∏–∑–Ω–µ—Å:* ${lead.business}
üí∞ *–ë—é–¥–∂–µ—Ç:* ${lead.budget || '–ù–µ —É–∫–∞–∑–∞–Ω'}
üìù *–ó–∞–ø—Ä–æ—Å:* ${lead.request || '–ù–µ —É–∫–∞–∑–∞–Ω'}
üìû *–ö–æ–Ω—Ç–∞–∫—Ç—ã:* ${lead.contacts}
üìÖ *–î–∞—Ç–∞:* ${formatDate(lead.created_at)}`;
}

export default async function handler(req: NextApiRequest, res: NextApiResponse) {
  console.log('üîÑ Pages API Webhook received');
  
  if (req.method !== 'POST') {
    return res.status(405).json({ error: 'Method not allowed' });
  }

  try {
    const { sql, TelegramBot } = await getModules();
    
    if (!sql || !TelegramBot) {
      console.log('‚ùå Modules not available');
      return res.status(500).json({ error: 'Modules not available' });
    }

    const { message } = req.body;
    console.log('üì® Webhook body:', JSON.stringify(req.body, null, 2));

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –≤–∞–ª–∏–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if (!message || !message.chat) {
      console.log('‚ùå Invalid message format');
      return res.status(200).json({ ok: true });
    }

    const bot = new TelegramBot(process.env.TELEGRAM_BOT_TOKEN!, { polling: false });
    const chatId = message.chat.id;
    const text = message.text;

    console.log(`üìù Processing message from ${chatId}: ${text}`);

    try {
      // –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
      await sql`
        CREATE TABLE IF NOT EXISTS leads (
          id SERIAL PRIMARY KEY,
          lead_number INTEGER UNIQUE NOT NULL DEFAULT 1,
          name TEXT NOT NULL,
          business TEXT NOT NULL,
          request TEXT,
          budget TEXT,
          contacts TEXT NOT NULL,
          created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
          updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        );
      `;

      await sql`
        CREATE TABLE IF NOT EXISTS bot_subscribers (
          id SERIAL PRIMARY KEY,
          chat_id BIGINT UNIQUE NOT NULL,
          username TEXT,
          first_name TEXT,
          last_name TEXT,
          is_active BOOLEAN DEFAULT true,
          created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
          last_activity TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        );
      `;

      // –î–æ–±–∞–≤–ª—è–µ–º/–æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ–¥–ø–∏—Å—á–∏–∫–∞
      const { chat, from } = message;
      await sql`
        INSERT INTO bot_subscribers (chat_id, username, first_name, last_name, last_activity)
        VALUES (${chat.id}, ${from.username || null}, ${from.first_name || null}, ${from.last_name || null}, CURRENT_TIMESTAMP)
        ON CONFLICT (chat_id) 
        DO UPDATE SET 
          username = EXCLUDED.username,
          first_name = EXCLUDED.first_name,
          last_name = EXCLUDED.last_name,
          is_active = true,
          last_activity = CURRENT_TIMESTAMP;
      `;

      if (text === '/start') {
        const welcomeMessage = `üéâ *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!*

–í—ã –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –ª–∏–¥–∞—Ö —Å —Å–∞–π—Ç–∞ Mayyam.

ü§ñ *–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*

üìä /export_leads - –≠–∫—Å–ø–æ—Ä—Ç –≤—Å–µ—Ö –ª–∏–¥–æ–≤ –≤ CSV —Ñ–∞–π–ª
üÜï /last_lead - –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–π –ª–∏–¥
üìã /stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ª–∏–¥–∞–º
üîî /unsubscribe - –û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
üìã /help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É

---
‚ú® –¢–µ–ø–µ—Ä—å –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∫–∞–∂–¥–æ–º –Ω–æ–≤–æ–º –ª–∏–¥–µ!`;

        await bot.sendMessage(chatId, welcomeMessage, { parse_mode: 'Markdown' });
        console.log('‚úÖ Welcome message sent');

      } else if (text === '/help') {
        const helpMessage = `ü§ñ *–ë–æ—Ç —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ª–∏–¥–∞–º–∏*

–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:

üìä /export_leads - –≠–∫—Å–ø–æ—Ä—Ç –≤—Å–µ—Ö –ª–∏–¥–æ–≤ –≤ CSV —Ñ–∞–π–ª
üÜï /last_lead - –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–π –ª–∏–¥
üìà /stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ª–∏–¥–∞–º
üîî /unsubscribe - –û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
üìã /help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É

---
üåê –õ–∏–¥—ã –ø–æ—Å—Ç—É–ø–∞—é—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å —Å–∞–π—Ç–∞ Mayyam
‚ú® –í—Å–µ –ø–æ–¥–ø–∏—Å—á–∏–∫–∏ –ø–æ–ª—É—á–∞—é—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –ª–∏–¥–∞—Ö`;

        await bot.sendMessage(chatId, helpMessage, { parse_mode: 'Markdown' });
        console.log('üìã Help sent');

      } else if (text === '/stats') {
        const leadsResult = await sql`SELECT COUNT(*) as total FROM leads;`;
        const subscribersResult = await sql`SELECT COUNT(*) as total FROM bot_subscribers WHERE is_active = true;`;

        const statsMessage = `üìà *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞*

üìä –í—Å–µ–≥–æ –ª–∏–¥–æ–≤: ${leadsResult.rows[0].total}
üë• –ü–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –±–æ—Ç–∞: ${subscribersResult.rows[0].total}
üïí –û–±–Ω–æ–≤–ª–µ–Ω–æ: ${new Date().toLocaleString('ru-RU')}`;

        await bot.sendMessage(chatId, statsMessage, { parse_mode: 'Markdown' });
        console.log('üìà Stats sent');

      } else if (text === '/last_lead') {
        const result = await sql`
          SELECT id, lead_number, name, business, request, budget, contacts, created_at, updated_at 
          FROM leads 
          ORDER BY lead_number DESC 
          LIMIT 1;
        `;

        if (result.rows.length === 0) {
          await bot.sendMessage(chatId, 'üìù *–ü–æ—Å–ª–µ–¥–Ω–∏–π –ª–∏–¥*\n\n–õ–∏–¥–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç.', {
            parse_mode: 'Markdown'
          });
        } else {
          const lastLead = result.rows[0];
          const message = formatLead(lastLead, true);
          await bot.sendMessage(chatId, message, { parse_mode: 'Markdown' });
        }
        console.log('üÜï Last lead processed');
      }

    } catch (dbError) {
      console.error('‚ùå Database error:', dbError);
      await bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö');
    }

    console.log('‚úÖ Webhook processed successfully');
    return res.status(200).json({ ok: true });

  } catch (error) {
    console.error('‚ùå Webhook error:', error);
    return res.status(500).json({ error: 'Internal error' });
  }
}
